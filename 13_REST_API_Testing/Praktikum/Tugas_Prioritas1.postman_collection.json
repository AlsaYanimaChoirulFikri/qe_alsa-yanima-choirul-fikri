{
	"info": {
		"_postman_id": "f823c4f4-d9ed-47c5-995a-987ee4a3706b",
		"name": "Tugas_Prioritas1",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "GET",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"pm.test(\"Response should be an array\", function () {\r",
							"    pm.expect(Array.isArray(pm.response.json())).to.be.true;\r",
							"});\r",
							"\r",
							"pm.test(\"Response array is not empty\", function () {\r",
							"    pm.expect(pm.response.json().length).to.be.above(0);\r",
							"});\r",
							"\r",
							"pm.test(\"First post contains expected keys\", function () {\r",
							"    var responseData = pm.response.json();\r",
							"    pm.expect(responseData[0]).to.have.all.keys('userId', 'id', 'title', 'body');\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{JSON_TEST}}/posts",
					"host": [
						"{{JSON_TEST}}"
					],
					"path": [
						"posts"
					],
					"query": [
						{
							"key": "",
							"value": null,
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "POST",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has a title\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('title', 'expected title'); \r",
							"});\r",
							"\r",
							"pm.test(\"Response has a body\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('body', 'expected body'); \r",
							"});\r",
							"\r",
							"pm.test(\"Response has a non-existent property\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('nonExistentProperty'); \r",
							"});\r",
							"\r",
							"pm.test(\"Status code is not 400\", function () {\r",
							"    pm.response.to.not.have.status(400);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": \"new\",\r\n    \"body\": \"you\",\r\n    \"userId\": 5\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{JSON_TEST}}/posts",
					"host": [
						"{{JSON_TEST}}"
					],
					"path": [
						"posts"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body is in JSON format\", function () {\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains post id\", function () {\r",
							"    pm.expect(pm.response.json().id).to.exist;\r",
							"});\r",
							"\r",
							"pm.test(\"Title is updated\", function () {\r",
							"    var reqBody = JSON.parse(pm.request.body.raw);\r",
							"    pm.expect(pm.response.json().title).to.equal(reqBody.title);\r",
							"});\r",
							"\r",
							"pm.test(\"Body is updated\", function () {\r",
							"    var reqBody = JSON.parse(pm.request.body.raw);\r",
							"    pm.expect(pm.response.json().body).to.equal(reqBody.body);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": 1,\r\n    \"title\": \"Mudryk\",\r\n    \"body\": \"mm\",\r\n    \"userId\": 1\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{JSON_TEST}}/posts/1",
					"host": [
						"{{JSON_TEST}}"
					],
					"path": [
						"posts",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Post is deleted\", function () {\r",
							"    pm.expect(pm.response.json()).to.eql({});\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{JSON_TEST}}/posts/1",
					"host": [
						"{{JSON_TEST}}"
					],
					"path": [
						"posts",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Post ID is correct\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.id).to.equal(1);\r",
							"});\r",
							"\r",
							"pm.test(\"Post has a title\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('title');\r",
							"});\r",
							"\r",
							"pm.test(\"Post ID is incorrect\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.id).to.equal(2); \r",
							"});\r",
							"\r",
							"pm.test(\"Status code is not 404\", function () {\r",
							"    pm.response.to.not.have.status(404); \r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{JSON_TEST}}/posts/1",
					"host": [
						"{{JSON_TEST}}"
					],
					"path": [
						"posts",
						"1"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "JSON_TEST",
			"value": "https://jsonplaceholder.typicode.com"
		}
	]
}